<!doctype html>
<html lang="pt-BR">
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <title>Roteiro — Viagem</title>
  <script src="https://cdn.tailwindcss.com"></script>
  <link rel="manifest" href="manifest.json">
  <script src="https://cdn.jsdelivr.net/npm/sortablejs@1.15.0/Sortable.min.js"></script>
  <script type="module" src="firebase.js"></script>
  <style>
    /* ensure the map container always has height */
    #map { width: 100%; height: 520px; border-radius: 12px; }
  </style>
</head>
<body class="bg-gray-50 text-gray-800">
  <header class="bg-white shadow p-4">
    <div class="max-w-6xl mx-auto flex items-center justify-between">
      <h1 class="text-lg font-semibold">Roteiro & Gastos</h1>
      <a href="index.html" class="text-sm text-sky-600">← Voltar</a>
    </div>
  </header>
  <main class="max-w-6xl mx-auto p-6 grid grid-cols-1 lg:grid-cols-3 gap-6">
    <section class="lg:col-span-2 bg-white rounded-2xl shadow p-4">
      <div id="map" class=""></div>
      <div class="mt-3 flex gap-2">
        <input id="place-input" class="flex-1 rounded-md border px-3 py-2" placeholder="Buscar lugar (ex: Praia do Rosa)">
        <button id="add-marker" class="px-4 py-2 rounded-md bg-sky-600 text-white">Adicionar</button>
        <button id="calc-route" class="px-4 py-2 rounded-md bg-indigo-600 text-white">Calcular Rota</button>
      </div>
      <div class="mt-3 text-sm text-gray-500">Toque no mapa para marcar local. Arraste os itens na lista para reordenar.</div>
    </section>

    <aside class="bg-white rounded-2xl shadow p-4">
      <h2 class="font-medium mb-2">Locais salvos</h2>
      <div class="mb-3">
        <button id="add-favorite" class="px-3 py-2 rounded-md border text-sm">Mostrar Favoritos</button>
        <button id="clear-all" class="px-3 py-2 rounded-md border text-sm float-right text-red-600">Limpar tudo</button>
      </div>
      <ul id="locais-list" class="space-y-2 max-h-[300px] overflow-auto"></ul>

      <h3 class="mt-4 font-medium">Gastos gerais</h3>
      <div class="mt-2">
        <form id="gasto-form" class="space-y-2">
          <select id="g-local" class="w-full rounded-md border px-3 py-2 text-sm"></select>
          <input id="g-desc" class="w-full rounded-md border px-3 py-2 text-sm" placeholder="Descrição">
          <input id="g-valor" type="number" step="0.01" class="w-full rounded-md border px-3 py-2 text-sm" placeholder="Valor (R$)">
          <div class="flex gap-2">
            <button type="submit" class="flex-1 px-3 py-2 rounded-md bg-emerald-600 text-white">Adicionar</button>
            <button id="export-gastos" type="button" class="px-3 py-2 rounded-md border">Exportar CSV</button>
          </div>
        </form>
      </div>

      <ul id="lista-gastos" class="mt-4 space-y-2 text-sm"></ul>
      <div class="text-xs text-gray-400 mt-4">Total: <span id="total">R$ 0,00</span></div>
      <div class="text-xs text-gray-400 mt-2">Transporte (ida/volta) estimado: <span id="transport-total">R$ 0,00</span></div>
    </aside>
  </main>

  <!-- initialization script for map and handling -->
  <script>
  // expose global initMap for Google Maps callback
  function initMap() {
    const center = { lat: -27.5, lng: -49.0 };
    const map = new google.maps.Map(document.getElementById('map'), { center: center, zoom: 7, mapTypeControl:false, streetViewControl:false });

    const directionsService = new google.maps.DirectionsService();
    const directionsRenderer = new google.maps.DirectionsRenderer({ suppressMarkers: true });
    directionsRenderer.setMap(map);

    // expose helpers globally for other scripts to call drawRouteFromArray
    window.__viagem_map = map;
    window.__viagem_directionsService = directionsService;
    window.__viagem_directionsRenderer = directionsRenderer;

    // Autocomplete
    const input = document.getElementById('place-input');
    if (input) {
      const autocomplete = new google.maps.places.Autocomplete(input, { fields: ['name','geometry'] });
      autocomplete.bindTo('bounds', map);
      autocomplete.addListener('place_changed', function() {
        const place = autocomplete.getPlace();
        if (!place.geometry) { alert('Escolha um resultado válido da lista.'); return; }
        map.panTo(place.geometry.location);
        map.setZoom(14);
      });
    }

    // click to create marker (temporary marker example)
    map.addListener('click', function(e) {
      const lat = e.latLng.lat(), lng = e.latLng.lng();
      const nome = prompt('Nome para esse local:', 'Ponto de interesse') || 'Ponto';
      new google.maps.Marker({ position: e.latLng, map: map, title: nome });
      // you can call your addLocal(...) here to persist in Firebase
    });
  }
  window.initMap = initMap;

  // helper to draw route from array of points: [{lat, lng}, ...]
  function drawRouteFromArray(points) {
    if (!window.__viagem_directionsService || !window.__viagem_directionsRenderer) return;
    if (!points || points.length < 2) return;
    const origin = points[0];
    const destination = points[points.length - 1];
    const waypts = points.slice(1, -1).map(function(p) { return { location: { lat: p.lat, lng: p.lng }, stopover: true }; });
    const req = { origin: { lat: origin.lat, lng: origin.lng }, destination: { lat: destination.lat, lng: destination.lng }, waypoints: waypts, travelMode: 'DRIVING', optimizeWaypoints: false };
    window.__viagem_directionsService.route(req, function(res, status) {
      if (status === 'OK') { window.__viagem_directionsRenderer.setDirections(res); }
      else { console.error('Directions error:', status); alert('Erro ao calcular rota: ' + status); }
    });
  }
  window.drawRouteFromArray = drawRouteFromArray;
  </script>

  <!-- Google Maps script (single) with callback -->
  <script async defer src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAPkjcgFgdopkeZN0GnvhOc787jrajJnWc&libraries=places&callback=initMap"></script>
</body>
</html>
